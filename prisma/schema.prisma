// PFM Backend Simulator - Prisma Schema
// Based on PostgreSQL schema design for responsive-tiles support

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// ENUMS
// =============================================================================

enum AccountType {
  checking
  savings
  credit_card
  loan
  investment
  mortgage
  line_of_credit
  other
}

enum AccountState {
  active
  inactive
  archived
  pending
  error
}

enum AggregationType {
  cashedge
  finicity
  manual
  plaid
  mx
}

enum AlertType {
  account_threshold
  goal
  merchant_name
  spending_target
  transaction_limit
  upcoming_bill
}

enum GoalType {
  savings
  payoff
}

enum TransactionType {
  debit
  credit
}

// =============================================================================
// CORE MODELS
// =============================================================================

model Partner {
  id                 BigInt    @id @default(autoincrement())
  name               String
  domain             String    @unique
  subdomain          String?
  allowPartnerApiv2  Boolean   @default(true) @map("allow_partner_apiv2")
  ssoEnabled         Boolean   @default(false) @map("sso_enabled")
  mfaRequired        Boolean   @default(false) @map("mfa_required")
  logoUrl            String?   @map("logo_url")
  primaryColor       String?   @map("primary_color")
  secondaryColor     String?   @map("secondary_color")
  featureFlags       Json      @default("{}") @map("feature_flags")
  settings           Json      @default("{}")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  users              User[]
  accounts           Account[]
  oauthClients       OAuthClient[]

  @@map("partners")
}

model User {
  id                    BigInt    @id @default(autoincrement())
  partnerId             BigInt    @map("partner_id")
  email                 String?
  hashedPassword        String?   @map("hashed_password")
  salt                  String?
  firstName             String?   @map("first_name")
  lastName              String?   @map("last_name")
  phone                 String?
  timezone              String    @default("America/New_York")
  jwtSecret             String?   @map("jwt_secret")
  lastLoginAt           DateTime? @map("last_login_at")
  loginCount            Int       @default(0) @map("login_count")
  preferences           Json      @default("{}")
  failedLoginAttempts   Int       @default(0) @map("failed_login_attempts")
  lockedAt              DateTime? @map("locked_at")
  otpSecret             String?   @map("otp_secret")
  otpRequired           Boolean   @default(false) @map("otp_required")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  deletedAt             DateTime? @map("deleted_at")

  partner               Partner   @relation(fields: [partnerId], references: [id])
  accounts              Account[]
  transactions          Transaction[]
  budgets               Budget[]
  goals                 Goal[]
  alerts                Alert[]
  accessTokens          AccessToken[]
  notifications         Notification[]
  cashflowBills         CashflowBill[]
  cashflowIncomes       CashflowIncome[]
  cashflowEvents        CashflowEvent[]

  @@unique([email, partnerId])
  @@map("users")
}

model AccessToken {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt    @map("user_id")
  token       String    @unique
  expiresAt   DateTime  @map("expires_at")
  revokedAt   DateTime? @map("revoked_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("access_tokens")
}

model OAuthClient {
  id            BigInt    @id @default(autoincrement())
  partnerId     BigInt    @map("partner_id")
  clientId      String    @unique @map("client_id")
  clientSecret  String    @map("client_secret")
  name          String
  redirectUris  String[]  @map("redirect_uris")
  scopes        String[]  @default(["read", "write"])
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  partner       Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade)

  @@map("oauth_clients")
}

model Account {
  id                              BigInt          @id @default(autoincrement())
  userId                          BigInt          @map("user_id")
  partnerId                       BigInt          @map("partner_id")
  ceFiId                          BigInt?         @map("ce_fi_id")
  name                            String
  displayName                     String?         @map("display_name")
  number                          String?
  referenceId                     String?         @map("reference_id")
  ceAccountId                     String?         @map("ce_account_id")
  ceAccountLoginId                String?         @map("ce_account_login_id")
  accountType                     AccountType     @default(checking) @map("account_type")
  displayAccountType              AccountType     @default(checking) @map("display_account_type")
  aggregationType                 AggregationType @default(cashedge) @map("aggregation_type")
  aggregationSubtype              String?         @map("aggregation_subtype")
  balance                         Decimal         @default(0.00) @db.Decimal(12, 2)
  lockedBalance                   Decimal         @default(0.00) @map("locked_balance") @db.Decimal(12, 2)
  preferredBalanceType            String?         @map("preferred_balance_type")
  balanceType                     String?         @map("balance_type")
  state                           AccountState    @default(active)
  description                     String?
  includeInNetworth               Boolean         @default(true) @map("include_in_networth")
  includeInCashflow               Boolean         @default(true) @map("include_in_cashflow")
  includeInExpenses               Boolean         @default(true) @map("include_in_expenses")
  includeInBudget                 Boolean         @default(true) @map("include_in_budget")
  includeInGoals                  Boolean         @default(true) @map("include_in_goals")
  includeInDashboard              Boolean         @default(true) @map("include_in_dashboard")
  queueForHarvest                 Boolean         @default(false) @map("queue_for_harvest")
  harvestMessage                  String?         @map("harvest_message")
  harvestUpdatedAt                DateTime?       @map("harvest_updated_at")
  missingCount                    Int             @default(0) @map("missing_count")
  latestTransactionReferenceId    String?         @map("latest_transaction_reference_id")
  latestTransactionPostedAt       DateTime?       @map("latest_transaction_posted_at")
  oldestTransactionPostedAt       DateTime?       @map("oldest_transaction_posted_at")
  ordering                        Int             @default(0)
  uiExperience                    String          @default("pfm") @map("ui_experience")
  ceMisc                          String?         @map("ce_misc")
  createdAt                       DateTime        @default(now()) @map("created_at")
  updatedAt                       DateTime        @updatedAt @map("updated_at")
  archivedAt                      DateTime?       @map("archived_at")

  user                            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  partner                         Partner         @relation(fields: [partnerId], references: [id])
  transactions                    Transaction[]

  @@unique([userId, ceAccountLoginId])
  @@map("accounts")
}

model Transaction {
  id                      BigInt          @id @default(autoincrement())
  userId                  BigInt          @map("user_id")
  accountId               BigInt          @map("account_id")
  referenceId             String?         @map("reference_id")
  externalTransactionId   String?         @map("external_transaction_id")
  nickname                String?
  description             String?
  originalDescription     String?         @map("original_description")
  merchantName            String?         @map("merchant_name")
  amount                  Decimal         @db.Decimal(12, 2)
  balance                 Decimal?        @db.Decimal(12, 2)
  transactionType         TransactionType? @map("transaction_type")
  postedAt                DateTime        @map("posted_at")
  transactedAt            DateTime?       @map("transacted_at")
  primaryTagId            BigInt?         @map("primary_tag_id")
  checkNumber             String?         @map("check_number")
  metadata                Json            @default("{}")
  createdAt               DateTime        @default(now()) @map("created_at")
  updatedAt               DateTime        @updatedAt @map("updated_at")
  deletedAt               DateTime?       @map("deleted_at")

  user                    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  account                 Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([userId, transactionType, postedAt])
  @@index([userId, primaryTagId, postedAt])
  @@index([userId, merchantName, postedAt])
  @@index([accountId, postedAt])
  @@map("transactions")
}

model Tag {
  id           BigInt    @id @default(autoincrement())
  partnerId    BigInt?   @map("partner_id")
  userId       BigInt?   @map("user_id")
  name         String
  parentTagId  BigInt?   @map("parent_tag_id")
  icon         String?
  color        String?
  tagType      String    @default("user") @map("tag_type")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("tags")
}

model Budget {
  id                BigInt    @id @default(autoincrement())
  userId            BigInt    @map("user_id")
  name              String
  budgetAmount      Decimal   @map("budget_amount") @db.Decimal(12, 2)
  month             Int?      // 1-12
  year              Int?      // e.g., 2025
  spent             Decimal   @default(0.00) @db.Decimal(12, 2)
  state             String    @default("under") // under|risk|over
  tagNames          String[]  @default([]) @map("tag_names")
  accountList       BigInt[]  @default([]) @map("account_list")
  showOnDashboard   Boolean   @default(true) @map("show_on_dashboard")
  startDate         DateTime? @map("start_date") @db.Date
  endDate           DateTime? @map("end_date") @db.Date
  recurrencePeriod  String?   @map("recurrence_period")
  other             Json      @default("{}")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model Goal {
  id              BigInt    @id @default(autoincrement())
  userId          BigInt    @map("user_id")
  goalType        GoalType  @map("goal_type")
  name            String
  description     String?
  targetAmount    Decimal   @map("target_amount") @db.Decimal(12, 2)
  currentAmount   Decimal   @default(0.00) @map("current_amount") @db.Decimal(12, 2)
  accountId       BigInt?   @map("account_id")
  targetDate      DateTime? @map("target_date") @db.Date
  recurring       Boolean   @default(false)
  imageUrl        String?   @map("image_url")
  icon            String?
  metadata        Json      @default("{}")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  archivedAt      DateTime? @map("archived_at")
  deletedAt       DateTime? @map("deleted_at")

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model Alert {
  id                BigInt    @id @default(autoincrement())
  userId            BigInt    @map("user_id")
  alertType         AlertType @map("alert_type")
  name              String
  sourceType        String?   @map("source_type")
  sourceId          BigInt?   @map("source_id")
  conditions        Json      @default("{}")
  emailDelivery     Boolean   @default(true) @map("email_delivery")
  smsDelivery       Boolean   @default(false) @map("sms_delivery")
  active            Boolean   @default(true)
  lastTriggeredAt   DateTime? @map("last_triggered_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

model Notification {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt    @map("user_id")
  alertId     BigInt?   @map("alert_id")
  title       String
  message     String
  read        Boolean   @default(false)
  readAt      DateTime? @map("read_at")
  emailSent   Boolean   @default(false) @map("email_sent")
  emailSentAt DateTime? @map("email_sent_at")
  smsSent     Boolean   @default(false) @map("sms_sent")
  smsSentAt   DateTime? @map("sms_sent_at")
  metadata    Json      @default("{}")
  createdAt   DateTime  @default(now()) @map("created_at")
  deletedAt   DateTime? @map("deleted_at")

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// =============================================================================
// CASHFLOW MODELS
// =============================================================================

model CashflowBill {
  id              BigInt    @id @default(autoincrement())
  userId          BigInt    @map("user_id")
  name            String
  amount          Decimal   @db.Decimal(12, 2)
  dueDate         Int       @map("due_date")              // Day of month (1-31)
  recurrence      String    @default("monthly")           // "monthly" | "biweekly" | "weekly"
  categoryId      BigInt?   @map("category_id")
  accountId       BigInt?   @map("account_id")
  active          Boolean   @default(true)
  stoppedAt       DateTime? @map("stopped_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, deletedAt, active])
  @@index([userId, dueDate])
  @@map("cashflow_bills")
}

model CashflowIncome {
  id              BigInt    @id @default(autoincrement())
  userId          BigInt    @map("user_id")
  name            String
  amount          Decimal   @db.Decimal(12, 2)
  receiveDate     Int       @map("receive_date")          // Day of month (1-31)
  recurrence      String    @default("monthly")           // "monthly" | "biweekly" | "weekly"
  categoryId      BigInt?   @map("category_id")
  accountId       BigInt?   @map("account_id")
  active          Boolean   @default(true)
  stoppedAt       DateTime? @map("stopped_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, deletedAt, active])
  @@index([userId, receiveDate])
  @@map("cashflow_incomes")
}

model CashflowEvent {
  id              BigInt    @id @default(autoincrement())
  userId          BigInt    @map("user_id")
  sourceType      String    @map("source_type")           // "bill" | "income" | "transaction"
  sourceId        BigInt?   @map("source_id")
  name            String
  amount          Decimal   @db.Decimal(12, 2)
  eventDate       DateTime  @map("event_date") @db.Date
  eventType       String    @map("event_type")            // "income" | "expense"
  accountId       BigInt?   @map("account_id")
  processed       Boolean   @default(false)
  metadata        Json      @default("{}")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, eventDate, deletedAt])
  @@index([userId, sourceType, sourceId])
  @@index([userId, processed])
  @@map("cashflow_events")
}
